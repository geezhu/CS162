1.$1 = (char **) 0x7fffffffe628
2.$2 = 0x7fffffffe844 "/home/vagrant/code/personal/hw0/wc"
3.Symbol "main" is a function at address 0x40069d.(info add main)
4.#0  main (argc=1, argv=0x7fffffffe628) at wc.c:33
now it's showing the current function and its args' value,if there is more than one func,it will shows others' address and name.
5.Stack level 0, frame at 0x7fffffffe550:
 rip = 0x4007b6 in main (wc.c:33); saved rip = 0x7ffff7a32f45
 source language c.
 Arglist at 0x7fffffffe540, args: argc=1, argv=0x7fffffffe628
 Locals at 0x7fffffffe540, Previous frame's sp is 0x7fffffffe550
 Saved registers:
  rbp at 0x7fffffffe540, rip at 0x7fffffffe548
tack level 0:
frame num in backtrace, 0 is current executing frame, which grows downwards, in consistence with the stack.
frame at 0x7fffffffe550:
starting memory address of this stack frame
rip = 0x4007b6 in main (wc.c:33)
rip for next instr to exec ,which is at line 33 of wc.c
saved rip = 0x7ffff7a32f45:
for "return address"
source language c:
it's writed in C
Arglist at 0x7fffffffe540, args: argc=1, argv=0x7fffffffe628:
the starting address of args and their values
Locals at 0x7fffffffe540, Previous frame's sp is 0x7fffffffe550:
address of Local vars,and caller's frame
Saved registers:
rbp at 0x7fffffffe540, rip at 0x7fffffffe548:
it's saved in callee's stack for the caller's rip address where contains 0x7ffff7a32f45 and the rbp address for the base address to operate Loacal vars
6.
rip            0x4007b6	0x4007b6 <main+281>
cs             0x33	51:
rip for the current offset for next instr
and cs for the code segment
